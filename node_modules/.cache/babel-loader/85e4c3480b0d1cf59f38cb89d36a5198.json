{"ast":null,"code":"var _jsxFileName = \"/Users/alhusseinr1/Documents/Git/restaurant-automation-react-app/src/views/Payroll/payrollTable.js\";\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from \"@material-ui/core/Button\";\nimport TopBar from \"../../components/TopBar\";\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nconst {\n  REACT_APP_API_URL\n} = process.env;\nconst columns = [{\n  id: 'userId',\n  label: 'Username',\n  align: 'left'\n}, {\n  id: 'clockInTime',\n  label: 'Clock In Time',\n  align: 'left'\n}, {\n  id: 'clockOutTime',\n  label: 'Clock Out Time',\n  align: 'left'\n}, {\n  id: 'hoursWorked',\n  label: 'Total Hours Worked',\n  align: 'left'\n}, {\n  id: 'totalWage',\n  label: 'Total Pay',\n  align: 'left'\n}];\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    margin: '4em 4em'\n  },\n  container: {\n    maxHeight: 1000\n  },\n  btn: {\n    margin: '0 1em'\n  },\n  align: {\n    textAlign: 'center'\n  },\n  btnUpdate: {\n    backgroundColor: 'green'\n  }\n});\nexport default function StickyHeadTable() {\n  const classes = useStyles();\n  const [count, setCount] = React.useState(0);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [state, setState] = React.useState({\n    rows: [],\n    edit: null\n  });\n  useEffect(() => {\n    setCount(0);\n    fetch(REACT_APP_API_URL + '/api/p/', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('jwtToken')\n      }\n    }).then(response => response.json()).then(payrollRecords => {\n      fetch(REACT_APP_API_URL + '/api/u/all', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': localStorage.getItem('jwtToken')\n        }\n      }).then(response => response.json()).then(allUsers => {\n        payrollRecords.map(payrollRecord => {\n          const user = allUsers.filter(user => user.id === payrollRecord.userId);\n          payrollRecord.clockInTime = formatDate(payrollRecord.clockInTime);\n          payrollRecord.clockOutTime = formatDate(payrollRecord.clockOutTime);\n          payrollRecord.userId = user[0].username;\n        });\n        setState({ ...state,\n          rows: payrollRecords\n        });\n      }).catch(e => console.log(e));\n    }).catch(e => console.log(e));\n  }, [count]); // const getUsername = (userId) => {\n  //     console.log(\"user id\" + userId);\n  //     fetch(REACT_APP_API_URL+'/api/u/', {\n  //         method: 'DELETE',\n  //         body: JSON.stringify({ userId }),\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //             'Authorization': localStorage.getItem('jwtToken')\n  //         }\n  //     }).then(response => response.json()).then(result => {\n  //\n  //     }).catch(error => console.log(error))\n  // }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const editable = id => {\n    setState({ ...state,\n      edit: id\n    });\n  };\n\n  const cancelEditable = () => {\n    setState({ ...state,\n      edit: false\n    });\n  };\n\n  const deleteRecord = id => {\n    fetch(REACT_APP_API_URL + '/api/p/', {\n      method: 'DELETE',\n      body: JSON.stringify({\n        id\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('jwtToken')\n      }\n    }).then(response => response.json()).then(result => {\n      if (result) {\n        window.location.reload();\n      }\n    }).catch(error => console.log(error));\n  }; // const updateRecord = ( id, username, email, role, phoneNumber) => {\n  //     const userinfo = { id, username, email, role, phoneNumber };\n  //     console.log(userinfo);\n  //     fetch(REACT_APP_API_URL+'/api/p/', {\n  //         method: 'PUT',\n  //         body: JSON.stringify({\n  //             userinfo\n  //         }),\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //             'Authorization': localStorage.getItem('jwtToken')\n  //         }\n  //     }).then(response => response.json()).then(result => {\n  //         if(result) {\n  //             window.location.reload();\n  //         }\n  //     }).catch(error => console.log(error))\n  // }\n\n\n  const updateValue = (id, columnId, e) => {\n    let tempRow = null;\n    state.rows.map(row => {\n      if (row.id === id) {\n        tempRow = row;\n        tempRow[columnId] = e.target.value;\n      }\n    });\n    let newRows = [];\n    state.rows.map(row => {\n      if (row.id === id) {\n        newRows.push(tempRow);\n      } else {\n        newRows.push(row);\n      }\n    });\n    setState({ ...state,\n      rows: newRows\n    });\n  };\n\n  const formatDate = dateTime => {\n    const date = dateTime.substring(0, 10);\n    const time = checkTime(dateTime.substring(11, 19));\n    dateTime = date + '  ' + time;\n    return dateTime;\n  };\n\n  const checkTime = time => {\n    if (parseInt(time.substring(0, 2)) > 12) {\n      time = parseInt(time) - 12 + 'pm';\n    } else if (parseInt(time.substring(0, 2)) < 12) {\n      time = time + 'am';\n    }\n\n    return time;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TopBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 29\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 41\n    }\n  }, column.label))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 25\n    }\n  }, state.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: row.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 37\n      }\n    }, columns.map(column => {\n      const value = row[column.id];\n      return /*#__PURE__*/React.createElement(React.Fragment, null, state.edit === row.id ? /*#__PURE__*/React.createElement(TableCell, {\n        key: row.id,\n        align: column.align,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        id: row.username,\n        label: column.id,\n        value: value,\n        onChange: e => updateValue(row.id, column.id, e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 65\n        }\n      }))) : /*#__PURE__*/React.createElement(TableCell, {\n        key: row.id,\n        align: column.align,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 57\n        }\n      }, value));\n    }), /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.align,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 41\n      }\n    }, state.edit === row.id ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.btnUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 53\n      }\n    }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: classes.btn,\n      onClick: cancelEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 53\n      }\n    }, \"Cancel\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: classes.btn,\n      onClick: () => deleteRecord(row.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 53\n      }\n    }, \"Delete\"))));\n  })))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [10, 25, 100],\n    component: \"div\",\n    count: state.rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/alhusseinr1/Documents/Git/restaurant-automation-react-app/src/views/Payroll/payrollTable.js"],"names":["React","useEffect","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Button","TopBar","FormControl","TextField","REACT_APP_API_URL","process","env","columns","id","label","align","useStyles","root","width","margin","container","maxHeight","btn","textAlign","btnUpdate","backgroundColor","StickyHeadTable","classes","count","setCount","useState","page","setPage","rowsPerPage","setRowsPerPage","state","setState","rows","edit","fetch","method","headers","localStorage","getItem","then","response","json","payrollRecords","allUsers","map","payrollRecord","user","filter","userId","clockInTime","formatDate","clockOutTime","username","catch","e","console","log","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","editable","cancelEditable","deleteRecord","body","JSON","stringify","result","window","location","reload","error","updateValue","columnId","tempRow","row","newRows","push","dateTime","date","substring","time","checkTime","parseInt","column","slice","code","length"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from \"@material-ui/core/Button\";\nimport TopBar from \"../../components/TopBar\";\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nconst { REACT_APP_API_URL } = process.env;\n\nconst columns = [\n    {id: 'userId', label: 'Username', align: 'left'},\n    {id: 'clockInTime', label: 'Clock In Time', align: 'left'},\n    {id: 'clockOutTime', label: 'Clock Out Time', align: 'left'},\n    {id: 'hoursWorked', label: 'Total Hours Worked', align: 'left'},\n    {id: 'totalWage', label: 'Total Pay', align: 'left'},\n];\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        margin: '4em 4em'\n    },\n    container: {\n        maxHeight: 1000,\n    },\n    btn: {\n        margin: '0 1em'\n    },\n    align: {\n        textAlign: 'center'\n    },\n    btnUpdate: {\n        backgroundColor: 'green'\n    }\n});\n\nexport default function StickyHeadTable() {\n    const classes = useStyles();\n    const [count, setCount] = React.useState(0);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [state, setState] = React.useState({\n        rows: [],\n        edit: null\n    })\n\n    useEffect(() => {\n        setCount(0);\n        fetch(REACT_APP_API_URL + '/api/p/', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('jwtToken')\n            }\n        }).then(response => response.json()).then(payrollRecords => {\n\n            fetch(REACT_APP_API_URL + '/api/u/all', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': localStorage.getItem('jwtToken')\n                }\n            }).then(response => response.json()).then(allUsers => {\n                payrollRecords.map((payrollRecord) => {\n                    const user = allUsers.filter(user => user.id === payrollRecord.userId);\n                    payrollRecord.clockInTime = formatDate(payrollRecord.clockInTime);\n                    payrollRecord.clockOutTime = formatDate(payrollRecord.clockOutTime);\n                    payrollRecord.userId = user[0].username;\n                });\n                setState({...state, rows: payrollRecords});\n            }).catch(e => console.log(e))\n        }).catch(e => console.log(e))\n    }, [count])\n\n    // const getUsername = (userId) => {\n    //     console.log(\"user id\" + userId);\n    //     fetch(REACT_APP_API_URL+'/api/u/', {\n    //         method: 'DELETE',\n    //         body: JSON.stringify({ userId }),\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //             'Authorization': localStorage.getItem('jwtToken')\n    //         }\n    //     }).then(response => response.json()).then(result => {\n    //\n    //     }).catch(error => console.log(error))\n    // }\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const editable = (id) => {\n        setState({...state, edit: id});\n    }\n\n    const cancelEditable = () => {\n        setState({...state, edit: false})\n    }\n\n    const deleteRecord = (id) => {\n        fetch(REACT_APP_API_URL+'/api/p/', {\n            method: 'DELETE',\n            body: JSON.stringify({\n                id\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('jwtToken')\n            }\n        }).then(response => response.json()).then(result => {\n            if(result) {\n                window.location.reload();\n            }\n        }).catch(error => console.log(error))\n    }\n\n    // const updateRecord = ( id, username, email, role, phoneNumber) => {\n    //     const userinfo = { id, username, email, role, phoneNumber };\n    //     console.log(userinfo);\n    //     fetch(REACT_APP_API_URL+'/api/p/', {\n    //         method: 'PUT',\n    //         body: JSON.stringify({\n    //             userinfo\n    //         }),\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //             'Authorization': localStorage.getItem('jwtToken')\n    //         }\n    //     }).then(response => response.json()).then(result => {\n    //         if(result) {\n    //             window.location.reload();\n    //         }\n    //     }).catch(error => console.log(error))\n    // }\n\n    const updateValue = (id, columnId, e) => {\n        let tempRow = null;\n        state.rows.map(row => {\n            if(row.id === id) {\n                tempRow = row;\n                tempRow[columnId] = e.target.value;\n            }\n        })\n\n        let newRows = [];\n        state.rows.map(row => {\n            if(row.id === id) {\n                newRows.push(tempRow);\n            } else {\n                newRows.push(row);\n            }\n        })\n\n        setState({\n            ...state, rows: newRows\n        })\n    }\n\n    const formatDate = dateTime => {\n        const date = dateTime.substring(0, 10);\n        const time = checkTime(dateTime.substring(11, 19));\n\n        dateTime = date + '  ' + time;\n        return dateTime;\n    }\n\n    const checkTime = time => {\n        if(parseInt(time.substring(0, 2)) > 12) {\n            time = parseInt(time) - 12 + 'pm'\n        } else if (parseInt(time.substring(0, 2)) < 12) {\n            time = time + 'am'\n        }\n        return time;\n    }\n\n    return (\n        <>\n            <TopBar/>\n            <Paper className={classes.root}>\n                <TableContainer className={classes.container}>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        align={column.align}\n                                    >\n                                        <strong>{column.label}</strong>\n                                    </TableCell>\n                                ))}\n                                <TableCell></TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {state.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                                return (\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                                        {columns.map((column) => {\n                                            const value = row[column.id];\n                                            return (\n                                                <>\n                                                    {state.edit === row.id ?\n                                                        <TableCell key={row.id} align={column.align}>\n                                                            <FormControl style={{width: '100%'}}>\n                                                                <TextField id={row.username} label={column.id} value={value} onChange={ (e) => updateValue(row.id, column.id, e) } />\n                                                            </FormControl>\n                                                        </TableCell>\n                                                        :\n                                                        <TableCell key={row.id} align={column.align}>\n                                                            {value}\n                                                        </TableCell>\n                                                    }\n                                                </>\n                                            );\n                                        })}\n                                        <TableCell className={classes.align}>\n                                            {state.edit === row.id ?\n                                                <>\n                                                    <Button variant=\"contained\" color=\"primary\" className={classes.btnUpdate}>Update</Button>\n                                                    <Button variant=\"contained\" color=\"secondary\" className={classes.btn} onClick={cancelEditable}>Cancel</Button>\n                                                </>\n                                                :\n                                                <>\n                                                    <Button variant=\"contained\" color=\"secondary\" className={classes.btn} onClick={() => deleteRecord(row.id)}>Delete</Button>\n                                                </>\n                                            }\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={state.rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </>\n\n    );\n}"]},"metadata":{},"sourceType":"module"}