{"ast":null,"code":"var _jsxFileName = \"/Users/alhusseinr1/Documents/Git/restaurant-automation-react-app/src/views/EmployeeProfiles/employeeProfiles.js\";\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from \"@material-ui/core/Button\";\nimport TopBar from \"../../components/TopBar\";\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport AlertDialog from './addEmployee';\nconst {\n  REACT_APP_API_URL\n} = process.env;\nconst columns = [{\n  id: 'username',\n  label: 'Username',\n  align: 'left'\n}, {\n  id: 'email',\n  label: 'Email',\n  align: 'left'\n}, {\n  id: 'role',\n  label: 'Role',\n  align: 'left'\n}, {\n  id: 'phoneNumber',\n  label: 'Phone Number',\n  align: 'left'\n}, {\n  id: 'wage',\n  label: 'Wage',\n  align: 'left'\n}];\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    margin: '4em 4em'\n  },\n  container: {\n    maxHeight: 1000\n  },\n  btn: {\n    margin: '0 1em'\n  },\n  align: {\n    textAlign: 'center'\n  },\n  btnUpdate: {\n    backgroundColor: 'green'\n  }\n});\nexport default function StickyHeadTable() {\n  const classes = useStyles();\n  const [count, setCount] = React.useState(0);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [state, setState] = React.useState({\n    rows: [],\n    edit: null\n  });\n  useEffect(() => {\n    setCount(0);\n    fetch(REACT_APP_API_URL + '/api/u/all', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('jwtToken')\n      }\n    }).then(response => response.json()).then(result => {\n      console.log(result);\n      setState({ ...state,\n        rows: result\n      });\n    }).catch(e => console.log(e));\n  }, [count]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const editable = id => {\n    setState({ ...state,\n      edit: id\n    });\n  };\n\n  const cancelEditable = () => {\n    setState({ ...state,\n      edit: false\n    });\n  };\n\n  const deleteUser = (id, username) => {\n    console.log(id + \" \" + username);\n    fetch(REACT_APP_API_URL + '/api/u/', {\n      method: 'DELETE',\n      body: JSON.stringify({\n        id,\n        username\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('jwtToken')\n      }\n    }).then(response => response.json()).then(result => {\n      if (result) {\n        window.location.reload();\n      }\n    }).catch(error => console.log(error));\n  };\n\n  const updateUser = (id, username, email, role, phoneNumber, wage) => {\n    const userinfo = {\n      id,\n      username,\n      email,\n      role,\n      phoneNumber,\n      wage\n    };\n    console.log(userinfo);\n    fetch(REACT_APP_API_URL + '/api/u/', {\n      method: 'PUT',\n      body: JSON.stringify(userinfo),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('jwtToken')\n      }\n    }).then(response => response.json()).then(result => {\n      if (result) {\n        window.location.reload();\n      }\n    }).catch(error => console.log(error));\n  };\n\n  const updateValue = (id, columnId, e) => {\n    let tempRow = null;\n    state.rows.map(row => {\n      if (row.id === id) {\n        tempRow = row;\n        tempRow[columnId] = e.target.value;\n      }\n    });\n    let newRows = [];\n    state.rows.map(row => {\n      if (row.id === id) {\n        newRows.push(tempRow);\n      } else {\n        newRows.push(row);\n      }\n    });\n    setState({ ...state,\n      rows: newRows\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TopBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 29\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 41\n    }\n  }, column.label))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 25\n    }\n  }, state.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: row.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 37\n      }\n    }, columns.map(column => {\n      const value = row[column.id];\n      return /*#__PURE__*/React.createElement(React.Fragment, null, state.edit === row.id ? /*#__PURE__*/React.createElement(TableCell, {\n        key: row.id,\n        align: column.align,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        id: row.username,\n        label: column.id,\n        value: value,\n        onChange: e => updateValue(row.id, column.id, e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 65\n        }\n      }))) : /*#__PURE__*/React.createElement(TableCell, {\n        key: row.id,\n        align: column.align,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 57\n        }\n      }, column.id === 'wage' ? /*#__PURE__*/React.createElement(React.Fragment, null, '$' + value) : /*#__PURE__*/React.createElement(React.Fragment, null, value)));\n    }), /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.align,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 41\n      }\n    }, state.edit === row.id ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.btnUpdate,\n      onClick: () => updateUser(row.id, row.username, row.email, row.role, row.phoneNumber, row.wage),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 53\n      }\n    }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: classes.btn,\n      onClick: cancelEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 53\n      }\n    }, \"Cancel\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.btn,\n      onClick: () => editable(row.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 53\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: classes.btn,\n      onClick: () => deleteUser(row.id, row.username),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 53\n      }\n    }, \"Delete\"))));\n  }), /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(AlertDialog, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 33\n    }\n  }))))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [10, 25, 100],\n    component: \"div\",\n    count: state.rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/alhusseinr1/Documents/Git/restaurant-automation-react-app/src/views/EmployeeProfiles/employeeProfiles.js"],"names":["React","useEffect","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Button","TopBar","FormControl","TextField","AlertDialog","REACT_APP_API_URL","process","env","columns","id","label","align","useStyles","root","width","margin","container","maxHeight","btn","textAlign","btnUpdate","backgroundColor","StickyHeadTable","classes","count","setCount","useState","page","setPage","rowsPerPage","setRowsPerPage","state","setState","rows","edit","fetch","method","headers","localStorage","getItem","then","response","json","result","console","log","catch","e","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","editable","cancelEditable","deleteUser","username","body","JSON","stringify","window","location","reload","error","updateUser","email","role","phoneNumber","wage","userinfo","updateValue","columnId","tempRow","map","row","newRows","push","column","slice","code","length"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from \"@material-ui/core/Button\";\nimport TopBar from \"../../components/TopBar\";\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport AlertDialog from './addEmployee';\nconst { REACT_APP_API_URL } = process.env;\n\nconst columns = [\n    {id: 'username', label: 'Username', align: 'left'},\n    {id: 'email', label: 'Email', align: 'left'},\n    {id: 'role', label: 'Role', align: 'left'},\n    {id: 'phoneNumber', label: 'Phone Number', align: 'left'},\n    {id: 'wage', label: 'Wage', align: 'left'},\n];\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        margin: '4em 4em'\n    },\n    container: {\n        maxHeight: 1000,\n    },\n    btn: {\n        margin: '0 1em'\n    },\n    align: {\n        textAlign: 'center'\n    },\n    btnUpdate: {\n        backgroundColor: 'green'\n    }\n});\n\nexport default function StickyHeadTable() {\n    const classes = useStyles();\n    const [count, setCount] = React.useState(0);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [state, setState] = React.useState({\n        rows: [],\n        edit: null\n    })\n\n    useEffect(() => {\n        setCount(0);\n        fetch(REACT_APP_API_URL + '/api/u/all', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('jwtToken'),\n            }\n        }).then(response => response.json()).then(result => {\n            console.log(result);\n            setState({...state, rows: result});\n        }).catch(e => console.log(e))\n    }, [count])\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const editable = (id) => {\n        setState({...state, edit: id});\n    }\n\n    const cancelEditable = () => {\n        setState({...state, edit: false})\n    }\n\n    const deleteUser = (id, username) => {\n        console.log(id + \" \" + username);\n        fetch(REACT_APP_API_URL+'/api/u/', {\n            method: 'DELETE',\n            body: JSON.stringify({\n                id, username\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('jwtToken')\n            }\n        }).then(response => response.json()).then(result => {\n            if(result) {\n                window.location.reload();\n            }\n        }).catch(error => console.log(error))\n    }\n\n    const updateUser = ( id, username, email, role, phoneNumber, wage) => {\n        const userinfo = { id, username, email, role, phoneNumber, wage };\n        console.log(userinfo);\n        fetch(REACT_APP_API_URL+'/api/u/', {\n            method: 'PUT',\n            body: JSON.stringify(userinfo),\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('jwtToken')\n            }\n        }).then(response => response.json()).then(result => {\n            if(result) {\n                window.location.reload();\n            }\n        }).catch(error => console.log(error))\n    }\n\n    const updateValue = (id, columnId, e) => {\n        let tempRow = null;\n        state.rows.map(row => {\n            if(row.id === id) {\n                tempRow = row;\n                tempRow[columnId] = e.target.value;\n            }\n        })\n\n        let newRows = [];\n        state.rows.map(row => {\n            if(row.id === id) {\n                newRows.push(tempRow);\n            } else {\n                newRows.push(row);\n            }\n        })\n\n        setState({\n            ...state, rows: newRows\n        })\n    }\n\n    return (\n        <>\n            <TopBar/>\n            <Paper className={classes.root}>\n                <TableContainer className={classes.container}>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        align={column.align}\n                                    >\n                                        <strong>{column.label}</strong>\n                                    </TableCell>\n                                ))}\n                                <TableCell></TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {state.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                                return (\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                                        {columns.map((column) => {\n                                            const value = row[column.id];\n                                            return (\n                                                <>\n                                                    {state.edit === row.id ?\n                                                        <TableCell key={row.id} align={column.align}>\n                                                            <FormControl style={{width: '100%'}}>\n                                                                <TextField id={row.username} label={column.id} value={value} onChange={ (e) => updateValue(row.id, column.id, e) } />\n                                                            </FormControl>\n                                                        </TableCell>\n                                                        :\n                                                        <TableCell key={row.id} align={column.align}>\n                                                            {column.id === 'wage' ?\n                                                                <>\n                                                                    {'$' + value}\n                                                                </>\n                                                                :\n                                                                <>\n                                                                    {value}\n                                                                </>\n                                                            }\n\n                                                        </TableCell>\n                                                    }\n                                                </>\n                                            );\n                                        })}\n                                        <TableCell className={classes.align}>\n                                            {state.edit === row.id ?\n                                                <>\n                                                    <Button variant=\"contained\" color=\"primary\" className={classes.btnUpdate} onClick={() => updateUser(row.id, row.username, row.email, row.role, row.phoneNumber, row.wage) }>Update</Button>\n                                                    <Button variant=\"contained\" color=\"secondary\" className={classes.btn} onClick={cancelEditable}>Cancel</Button>\n                                                </>\n                                                :\n                                                <>\n                                                    <Button variant=\"contained\" color=\"primary\" className={classes.btn} onClick={() => editable(row.id)}>Edit</Button>\n                                                    <Button variant=\"contained\" color=\"secondary\" className={classes.btn} onClick={() => deleteUser(row.id, row.username)}>Delete</Button>\n                                                </>\n                                            }\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                            <TableRow>\n                                <AlertDialog />\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={state.rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </>\n\n    );\n}"]},"metadata":{},"sourceType":"module"}