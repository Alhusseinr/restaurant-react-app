{"ast":null,"code":"var _jsxFileName = \"/Users/alhusseinr1/Documents/Git/restaurant-automation-react-app/src/views/Kitchen/kitchen.js\";\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from \"@material-ui/core/Button\";\nimport TopBar from \"../../components/TopBar\";\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nconst {\n  REACT_APP_API_URL\n} = process.env;\nconst columns = [{\n  id: 'item',\n  label: 'Item Name',\n  align: 'left'\n}, {\n  id: 'comments',\n  label: 'Comments',\n  align: 'left'\n}, {\n  id: 'status',\n  label: 'Orders Status',\n  align: 'left'\n}, {\n  id: 'tableId',\n  label: 'Table Id',\n  align: 'left'\n}];\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    margin: '4em 4em'\n  },\n  container: {\n    maxHeight: 1000\n  },\n  btn: {\n    margin: '0 1em'\n  },\n  align: {\n    textAlign: 'center'\n  },\n  btnUpdate: {\n    backgroundColor: 'green'\n  }\n});\nexport default function StickyHeadTable() {\n  const classes = useStyles();\n  const [count, setCount] = React.useState(0);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [state, setState] = React.useState({\n    rows: [],\n    edit: null\n  });\n  useEffect(() => {\n    setCount(0);\n    fetch(REACT_APP_API_URL + '/api/o/', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('jwtToken')\n      }\n    }).then(response => response.json()).then(result => {\n      fetch(REACT_APP_API_URL + '/api/m/', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': localStorage.getItem('jwtToken')\n        }\n      }).then(response => response.json()).then(allItems => {\n        //console.log(allItems.items);\n        console.log('rows: ', result);\n        result.map(order => {\n          const pendingOrder = allItems.items.filter(item => item.id === order.id);\n          console.log('mhm', pendingOrder);\n          order.item = pendingOrder[0].item;\n        });\n        setState({ ...state,\n          rows: result.filter(items => items.status === 'pending')\n        });\n      }).catch(e => console.log(e));\n    }).catch(e => console.log(e));\n  }, [count]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const updateOrder = (id, status) => {\n    fetch(REACT_APP_API_URL + '/api/o', {\n      method: 'PUT',\n      body: JSON.stringify({\n        id,\n        status\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('jwtToken')\n      }\n    }).then(response => response.json()).then(result => {\n      if (result) {\n        window.location.reload();\n      }\n    }).catch(e => console.log(e));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TopBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 41\n    }\n  }, column.label))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 25\n    }\n  }, state.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: row.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 37\n      }\n    }, columns.map(column => {\n      const value = row[column.id];\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: row.id,\n        align: column.align,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 49\n        }\n      }, value);\n    }), /*#__PURE__*/React.createElement(TableCell, {\n      className: classes.align,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.btn,\n      onClick: () => updateOrder(row.id, 'ready'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 45\n      }\n    }, \"Send Order\")));\n  })))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [10, 25, 100],\n    component: \"div\",\n    count: state.rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/alhusseinr1/Documents/Git/restaurant-automation-react-app/src/views/Kitchen/kitchen.js"],"names":["React","useEffect","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Button","TopBar","FormControl","TextField","REACT_APP_API_URL","process","env","columns","id","label","align","useStyles","root","width","margin","container","maxHeight","btn","textAlign","btnUpdate","backgroundColor","StickyHeadTable","classes","count","setCount","useState","page","setPage","rowsPerPage","setRowsPerPage","state","setState","rows","edit","fetch","method","headers","localStorage","getItem","then","response","json","result","allItems","console","log","map","order","pendingOrder","items","filter","item","status","catch","e","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","updateOrder","body","JSON","stringify","window","location","reload","column","slice","row","length"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from \"@material-ui/core/Button\";\nimport TopBar from \"../../components/TopBar\";\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\n\nconst {REACT_APP_API_URL} = process.env;\n\nconst columns = [\n    {id: 'item', label: 'Item Name', align: 'left'},\n    {id: 'comments', label: 'Comments', align: 'left'},\n    {id: 'status', label: 'Orders Status', align: 'left'},\n    {id: 'tableId', label: 'Table Id', align: 'left'},\n];\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        margin: '4em 4em'\n    },\n    container: {\n        maxHeight: 1000,\n    },\n    btn: {\n        margin: '0 1em'\n    },\n    align: {\n        textAlign: 'center'\n    },\n    btnUpdate: {\n        backgroundColor: 'green'\n    }\n});\n\nexport default function StickyHeadTable() {\n    const classes = useStyles();\n    const [count, setCount] = React.useState(0);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [state, setState] = React.useState({\n        rows: [],\n        edit: null\n    })\n\n    useEffect(() => {\n        setCount(0);\n        fetch(REACT_APP_API_URL + '/api/o/', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('jwtToken'),\n            }\n        }).then(response => response.json()).then(result => {\n            fetch(REACT_APP_API_URL + '/api/m/', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': localStorage.getItem('jwtToken')\n                }\n            }).then(response => response.json()).then(allItems => {\n                //console.log(allItems.items);\n                console.log('rows: ', result);\n                result.map((order) => {\n                    const pendingOrder = allItems.items.filter(item => item.id === order.id);\n                    console.log('mhm', pendingOrder)\n                    order.item = pendingOrder[0].item;\n                })\n                setState({...state, rows: result.filter(items => items.status === 'pending')});\n            }).catch(e => console.log(e));\n        }).catch(e => console.log(e))\n    }, [count])\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    const updateOrder = (id, status) => {\n        fetch(REACT_APP_API_URL + '/api/o', {\n            method: 'PUT',\n            body: JSON.stringify({id, status}),\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': localStorage.getItem('jwtToken')\n            }\n        }).then(response => response.json()).then(result => {\n            if(result) {\n                window.location.reload();\n            }\n        }).catch(e => console.log(e))\n    }\n\n    return (\n        <>\n            <TopBar/>\n            <Paper className={classes.root}>\n                <TableContainer className={classes.container}>\n                    <Table stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                {columns.map((column) => (\n                                    <TableCell\n                                        key={column.id}\n                                        align={column.align}\n                                    >\n                                        <strong>{column.label}</strong>\n                                    </TableCell>\n                                ))}\n                                <TableCell></TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {state.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                                return (\n                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\n                                        {columns.map((column) => {\n                                            const value = row[column.id];\n                                            return (\n                                                <TableCell key={row.id} align={column.align}>\n                                                    {value}\n                                                </TableCell>\n                                            );\n                                        })}\n                                        <TableCell className={classes.align}>\n                                            <Button variant=\"contained\" color=\"primary\" className={classes.btn} onClick={() => updateOrder(row.id, 'ready')}>Send Order</Button>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={state.rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </>\n\n    );\n}"]},"metadata":{},"sourceType":"module"}